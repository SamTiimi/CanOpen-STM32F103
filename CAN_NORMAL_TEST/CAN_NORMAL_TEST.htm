<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [CAN_NORMAL_TEST\CAN_NORMAL_TEST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image CAN_NORMAL_TEST\CAN_NORMAL_TEST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Fri Jul 12 10:54:18 2024
<BR><P>
<H3>Maximum Stack Usage =        824 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; canopen_app_process &rArr; canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInit &rArr; CO_NMT_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from stm32f1xx_it.o(.text.CAN1_RX1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">CO_HBcons_receive</a> from co_hbconsumer.o(.text.CO_HBcons_receive) referenced 2 times from co_hbconsumer.o(.text.CO_HBconsumer_initEntry)
 <LI><a href="#[3f]">CO_LSSslave_receive</a> from co_lssslave.o(.text.CO_LSSslave_receive) referenced 2 times from co_lssslave.o(.text.CO_LSSslave_init)
 <LI><a href="#[41]">CO_NMT_receive</a> from co_nmt_heartbeat.o(.text.CO_NMT_receive) referenced 2 times from co_nmt_heartbeat.o(.text.CO_NMT_init)
 <LI><a href="#[42]">CO_PDO_receive</a> from co_pdo.o(.text.CO_PDO_receive) referenced 2 times from co_pdo.o(.text.CO_RPDO_init)
 <LI><a href="#[42]">CO_PDO_receive</a> from co_pdo.o(.text.CO_PDO_receive) referenced 2 times from co_pdo.o(.text.OD_write_14xx)
 <LI><a href="#[47]">CO_SDO_receive</a> from co_sdoserver.o(.text.CO_SDO_receive) referenced 2 times from co_sdoserver.o(.text.CO_SDOserver_init_canRxTx)
 <LI><a href="#[4a]">CO_SYNC_receive</a> from co_sync.o(.text.CO_SYNC_receive) referenced 2 times from co_sync.o(.text.CO_SYNC_init)
 <LI><a href="#[4a]">CO_SYNC_receive</a> from co_sync.o(.text.CO_SYNC_receive) referenced 2 times from co_sync.o(.text.OD_write_1005)
 <LI><a href="#[4c]">CO_TIME_receive</a> from co_time.o(.text.CO_TIME_receive) referenced 2 times from co_time.o(.text.CO_TIME_init)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[52]">MX_CAN_Init</a> from can.o(.text.MX_CAN_Init) referenced 2 times from main.o(.text.main)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4e]">OD_readDisabled</a> from co_odinterface.o(.text.OD_readDisabled) referenced 2 times from co_odinterface.o(.text.OD_getSub)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 2 times from co_hbconsumer.o(.text.CO_HBconsumer_init)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 2 times from co_nmt_heartbeat.o(.text.CO_NMT_init)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 2 times from co_pdo.o(.text.CO_RPDO_init)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 2 times from co_sdoserver.o(.text.CO_SDOserver_init)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 4 times from co_sync.o(.text.CO_SYNC_init)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 2 times from co_time.o(.text.CO_TIME_init)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 2 times from co_pdo.o(.text.CO_TPDO_init)
 <LI><a href="#[3c]">OD_readOriginal</a> from co_odinterface.o(.text.OD_readOriginal) referenced 2 times from co_odinterface.o(.text.OD_getSub)
 <LI><a href="#[3a]">OD_read_1003</a> from co_emergency.o(.text.OD_read_1003) referenced 2 times from co_emergency.o(.text.CO_EM_init)
 <LI><a href="#[38]">OD_read_1014_default</a> from co_emergency.o(.text.OD_read_1014_default) referenced 2 times from co_emergency.o(.text.CO_EM_init)
 <LI><a href="#[43]">OD_read_PDO_commParam</a> from co_pdo.o(.text.OD_read_PDO_commParam) referenced 2 times from co_pdo.o(.text.CO_RPDO_init)
 <LI><a href="#[43]">OD_read_PDO_commParam</a> from co_pdo.o(.text.OD_read_PDO_commParam) referenced 2 times from co_pdo.o(.text.CO_TPDO_init)
 <LI><a href="#[50]">OD_read_dummy</a> from co_pdo.o(.text.OD_read_dummy) referenced 2 times from co_pdo.o(.text.PDOconfigMap)
 <LI><a href="#[4f]">OD_writeDisabled</a> from co_odinterface.o(.text.OD_writeDisabled) referenced 2 times from co_odinterface.o(.text.OD_getSub)
 <LI><a href="#[39]">OD_writeOriginal</a> from co_odinterface.o(.text.OD_writeOriginal) referenced 2 times from co_emergency.o(.text.CO_EM_init)
 <LI><a href="#[39]">OD_writeOriginal</a> from co_odinterface.o(.text.OD_writeOriginal) referenced 2 times from co_odinterface.o(.text.OD_getSub)
 <LI><a href="#[3b]">OD_write_1003</a> from co_emergency.o(.text.OD_write_1003) referenced 2 times from co_emergency.o(.text.CO_EM_init)
 <LI><a href="#[48]">OD_write_1005</a> from co_sync.o(.text.OD_write_1005) referenced 2 times from co_sync.o(.text.CO_SYNC_init)
 <LI><a href="#[4b]">OD_write_1012</a> from co_time.o(.text.OD_write_1012) referenced 2 times from co_time.o(.text.CO_TIME_init)
 <LI><a href="#[3d]">OD_write_1016</a> from co_hbconsumer.o(.text.OD_write_1016) referenced 2 times from co_hbconsumer.o(.text.CO_HBconsumer_init)
 <LI><a href="#[40]">OD_write_1017</a> from co_nmt_heartbeat.o(.text.OD_write_1017) referenced 2 times from co_nmt_heartbeat.o(.text.CO_NMT_init)
 <LI><a href="#[49]">OD_write_1019</a> from co_sync.o(.text.OD_write_1019) referenced 2 times from co_sync.o(.text.CO_SYNC_init)
 <LI><a href="#[46]">OD_write_1201_additional</a> from co_sdoserver.o(.text.OD_write_1201_additional) referenced 2 times from co_sdoserver.o(.text.CO_SDOserver_init)
 <LI><a href="#[44]">OD_write_14xx</a> from co_pdo.o(.text.OD_write_14xx) referenced 2 times from co_pdo.o(.text.CO_RPDO_init)
 <LI><a href="#[4d]">OD_write_18xx</a> from co_pdo.o(.text.OD_write_18xx) referenced 2 times from co_pdo.o(.text.CO_TPDO_init)
 <LI><a href="#[45]">OD_write_PDO_mapping</a> from co_pdo.o(.text.OD_write_PDO_mapping) referenced 2 times from co_pdo.o(.text.CO_RPDO_init)
 <LI><a href="#[45]">OD_write_PDO_mapping</a> from co_pdo.o(.text.OD_write_PDO_mapping) referenced 2 times from co_pdo.o(.text.CO_TPDO_init)
 <LI><a href="#[51]">OD_write_dummy</a> from co_pdo.o(.text.OD_write_dummy) referenced 2 times from co_pdo.o(.text.PDOconfigMap)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f1xx_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from stm32f1xx_it.o(.text.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f1xx_it.o(.text.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[35]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[53]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[126]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[127]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[128]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[129]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_receive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_readOriginal
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_dummy
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[124]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
</UL>

<P><STRONG><a name="[58]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_new
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN_FilterInit</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, can.o(.text.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAN_FilterInit &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
</UL>

<P><STRONG><a name="[60]"></a>CAN_SendMsg</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, can.o(.text.CAN_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = CAN_SendMsg &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[64]"></a>CAN_Start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, can.o(.text.CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_Start &rArr; CAN_FilterInit &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>CO_CANclearPendingSyncPDOs</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, co_driver_stm32.o(.text.CO_CANclearPendingSyncPDOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_CANclearPendingSyncPDOs
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
</UL>

<P><STRONG><a name="[67]"></a>CO_CANinit</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, canopen.o(.text.CO_CANinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CO_CANinit &rArr; CO_CANmodule_init &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[6a]"></a>CO_CANinterrupt_TX</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, co_driver_stm32.o(.text.CO_CANinterrupt_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
</UL>

<P><STRONG><a name="[6c]"></a>CO_CANmodule_disable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.CO_CANmodule_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CO_CANmodule_disable &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[69]"></a>CO_CANmodule_init</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, co_driver_stm32.o(.text.CO_CANmodule_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CO_CANmodule_init &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinit
</UL>

<P><STRONG><a name="[b9]"></a>CO_CANmodule_process</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, co_driver_stm32.o(.text.CO_CANmodule_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_CANmodule_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[6e]"></a>CO_CANopenInit</STRONG> (Thumb, 802 bytes, Stack size 104 bytes, canopen.o(.text.CO_CANopenInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = CO_CANopenInit &rArr; CO_NMT_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LEDs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[76]"></a>CO_CANopenInitPDO</STRONG> (Thumb, 534 bytes, Stack size 104 bytes, canopen.o(.text.CO_CANopenInitPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = CO_CANopenInitPDO &rArr; CO_TPDO_init &rArr; PDO_initMapping &rArr; OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[86]"></a>CO_CANrxBufferInit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.CO_CANrxBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_initEntry
</UL>

<P><STRONG><a name="[79]"></a>CO_CANsend</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, co_driver_stm32.o(.text.CO_CANsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNCsend
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
</UL>

<P><STRONG><a name="[68]"></a>CO_CANsetConfigurationMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.CO_CANsetConfigurationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CO_CANsetConfigurationMode &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[7a]"></a>CO_CANsetNormalMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.CO_CANsetNormalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CO_CANsetNormalMode &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[7f]"></a>CO_CANtxBufferInit</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, co_driver_stm32.o(.text.CO_CANtxBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1019
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
</UL>

<P><STRONG><a name="[70]"></a>CO_EM_init</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, co_emergency.o(.text.CO_EM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CO_EM_init &rArr; OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getPtr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[80]"></a>CO_EM_process</STRONG> (Thumb, 692 bytes, Stack size 40 bytes, co_emergency.o(.text.CO_EM_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CO_EM_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[72]"></a>CO_HBconsumer_init</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, co_hbconsumer.o(.text.CO_HBconsumer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CO_HBconsumer_init &rArr; OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_initEntry
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[87]"></a>CO_HBconsumer_process</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, co_hbconsumer.o(.text.CO_HBconsumer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CO_HBconsumer_process &rArr; CO_error
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[6f]"></a>CO_LEDs_init</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, co_leds.o(.text.CO_LEDs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_LEDs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[bd]"></a>CO_LEDs_process</STRONG> (Thumb, 974 bytes, Stack size 48 bytes, co_leds.o(.text.CO_LEDs_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CO_LEDs_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[88]"></a>CO_LSSinit</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, canopen.o(.text.CO_LSSinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CO_LSSinit &rArr; CO_LSSslave_init &rArr; CO_CANtxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[89]"></a>CO_LSSslave_init</STRONG> (Thumb, 334 bytes, Stack size 64 bytes, co_lssslave.o(.text.CO_LSSslave_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CO_LSSslave_init &rArr; CO_CANtxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSinit
</UL>

<P><STRONG><a name="[8a]"></a>CO_LSSslave_process</STRONG> (Thumb, 886 bytes, Stack size 56 bytes, co_lssslave.o(.text.CO_LSSslave_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CO_LSSslave_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[71]"></a>CO_NMT_init</STRONG> (Thumb, 524 bytes, Stack size 80 bytes, co_nmt_heartbeat.o(.text.CO_NMT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = CO_NMT_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[8e]"></a>CO_NMT_process</STRONG> (Thumb, 538 bytes, Stack size 64 bytes, co_nmt_heartbeat.o(.text.CO_NMT_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CO_NMT_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getErrorRegister
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_isError
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[77]"></a>CO_RPDO_init</STRONG> (Thumb, 748 bytes, Stack size 88 bytes, co_pdo.o(.text.CO_RPDO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CO_RPDO_init &rArr; PDO_initMapping &rArr; OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInitPDO
</UL>

<P><STRONG><a name="[97]"></a>CO_RPDO_process</STRONG> (Thumb, 650 bytes, Stack size 88 bytes, co_pdo.o(.text.CO_RPDO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CO_RPDO_process &rArr; CO_error
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_RPDO
</UL>

<P><STRONG><a name="[73]"></a>CO_SDOserver_init</STRONG> (Thumb, 694 bytes, Stack size 88 bytes, co_sdoserver.o(.text.CO_SDOserver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CO_SDOserver_init &rArr; OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_u32
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[9f]"></a>CO_SDOserver_process</STRONG> (Thumb, 2428 bytes, Stack size 144 bytes, co_sdoserver.o(.text.CO_SDOserver_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CO_SDOserver_process &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndWriteToOD
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_mappable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSDOabCode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_find
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[75]"></a>CO_SYNC_init</STRONG> (Thumb, 648 bytes, Stack size 56 bytes, co_sync.o(.text.CO_SYNC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CO_SYNC_init &rArr; OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getPtr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[aa]"></a>CO_SYNC_process</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, co_sync.o(.text.CO_SYNC_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CO_SYNC_process &rArr; CO_SYNCsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNCsend
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
</UL>

<P><STRONG><a name="[74]"></a>CO_TIME_init</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, co_time.o(.text.CO_TIME_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CO_TIME_init &rArr; OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
</UL>

<P><STRONG><a name="[af]"></a>CO_TIME_process</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, co_time.o(.text.CO_TIME_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CO_TIME_process &rArr; CO_getUint16
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint16
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[78]"></a>CO_TPDO_init</STRONG> (Thumb, 850 bytes, Stack size 88 bytes, co_pdo.o(.text.CO_TPDO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CO_TPDO_init &rArr; PDO_initMapping &rArr; OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_extension_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_error
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInitPDO
</UL>

<P><STRONG><a name="[b2]"></a>CO_TPDO_process</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, co_pdo.o(.text.CO_TPDO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
</UL>

<P><STRONG><a name="[b4]"></a>CO_delete</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, canopen.o(.text.CO_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CO_delete &rArr; CO_CANmodule_disable &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_new
</UL>

<P><STRONG><a name="[81]"></a>CO_error</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, co_emergency.o(.text.CO_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CO_error
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>

<P><STRONG><a name="[b6]"></a>CO_new</STRONG> (Thumb, 526 bytes, Stack size 32 bytes, canopen.o(.text.CO_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CO_new &rArr; CO_delete &rArr; CO_CANmodule_disable &rArr; HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
</UL>

<P><STRONG><a name="[b7]"></a>CO_process</STRONG> (Thumb, 586 bytes, Stack size 160 bytes, canopen.o(.text.CO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = CO_process &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_process
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LEDs_process
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_process
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getErrorRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_isError
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSslave_getState
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
</UL>

<P><STRONG><a name="[be]"></a>CO_process_RPDO</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, canopen.o(.text.CO_process_RPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CO_process_RPDO &rArr; CO_RPDO_process &rArr; CO_error
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_process
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
</UL>

<P><STRONG><a name="[bf]"></a>CO_process_SYNC</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, canopen.o(.text.CO_process_SYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CO_process_SYNC &rArr; CO_SYNC_process &rArr; CO_SYNCsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANclearPendingSyncPDOs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
</UL>

<P><STRONG><a name="[c1]"></a>CO_process_TPDO</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, canopen.o(.text.CO_process_TPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_process
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_getInternalState
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; CAN_SendMsg &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[66]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>

<P><STRONG><a name="[62]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendMsg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>

<P><STRONG><a name="[5e]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_can_received_msg
</UL>

<P><STRONG><a name="[61]"></a>HAL_CAN_GetTxMailboxesFreeLevel</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_GetTxMailboxesFreeLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_GetTxMailboxesFreeLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendMsg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_can_message
</UL>

<P><STRONG><a name="[5b]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 1010 bytes, Stack size 48 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_CAN_Init</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, can.o(.text.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo0FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; prv_read_can_received_msg &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_can_received_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo1FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback &rArr; prv_read_can_received_msg &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_read_can_received_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_SleepCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_SleepCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>HAL_CAN_Start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetNormalMode
</UL>

<P><STRONG><a name="[6d]"></a>HAL_CAN_Stop</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
</UL>

<P><STRONG><a name="[c4]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox0AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_CAN_TxMailbox0CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox1AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_CAN_TxMailbox1CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox2AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, co_driver_stm32.o(.text.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_can.o(.text.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_WakeUpFromRxMsgCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f1xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[d8]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, main.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; CAN_SendMsg &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendMsg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; CAN_SendMsg &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 798 bytes, Stack size 64 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[fe]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[fb]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[da]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>HAL_InitTick</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_MspInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SystemReset))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1658 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[de]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[120]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
</UL>

<P><STRONG><a name="[ee]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_interrupt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>MX_CAN_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, can.o(.text.MX_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_CAN_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[fd]"></a>MX_GPIO_Init</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>MX_TIM3_Init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>OD_find</STRONG> (Thumb, 244 bytes, Stack size 28 bytes, co_odinterface.o(.text.OD_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OD_find
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
</UL>

<P><STRONG><a name="[7b]"></a>OD_getPtr</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, co_odinterface.o(.text.OD_getPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OD_getPtr &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[a2]"></a>OD_getSDOabCode</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, co_odinterface.o(.text.OD_getSDOabCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getSDOabCode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndWriteToOD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
</UL>

<P><STRONG><a name="[a1]"></a>OD_getSub</STRONG> (Thumb, 558 bytes, Stack size 64 bytes, co_odinterface.o(.text.OD_getSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_value
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getPtr
</UL>

<P><STRONG><a name="[101]"></a>OD_get_value</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, co_odinterface.o(.text.OD_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u16
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
</UL>

<P><STRONG><a name="[3c]"></a>OD_readOriginal</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, co_odinterface.o(.text.OD_readOriginal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OD_readOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_PDO_commParam
</UL>
<BR>[Address Reference Count : 8]<UL><LI> co_pdo.o(.text.CO_TPDO_init)
<LI> co_pdo.o(.text.CO_RPDO_init)
<LI> co_odinterface.o(.text.OD_getSub)
<LI> co_time.o(.text.CO_TIME_init)
<LI> co_nmt_heartbeat.o(.text.CO_NMT_init)
<LI> co_hbconsumer.o(.text.CO_HBconsumer_init)
<LI> co_sdoserver.o(.text.CO_SDOserver_init)
<LI> co_sync.o(.text.CO_SYNC_init)
</UL>
<P><STRONG><a name="[106]"></a>OD_set_value</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, co_odinterface.o(.text.OD_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OD_set_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_u32
</UL>

<P><STRONG><a name="[39]"></a>OD_writeOriginal</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, co_odinterface.o(.text.OD_writeOriginal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1012
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1019
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1017
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1016
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_odinterface.o(.text.OD_getSub)
<LI> co_emergency.o(.text.CO_EM_init)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, segger_rtt.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[114]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, segger_rtt.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[63]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendMsg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>

<P><STRONG><a name="[118]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 848 bytes, Stack size 152 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>SystemClock_Config</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 240 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ef]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_TxMailbox2CompleteCallback &rArr; CO_CANinterrupt_TX &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>canopen_app_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, co_app_stm32.o(.text.canopen_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInit &rArr; CO_NMT_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_new
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_resetCommunication
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>canopen_app_interrupt</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, co_app_stm32.o(.text.canopen_app_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = canopen_app_interrupt &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_RPDO
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11f]"></a>canopen_app_process</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, co_app_stm32.o(.text.canopen_app_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = canopen_app_process &rArr; canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInit &rArr; CO_NMT_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>canopen_app_resetCommunication</STRONG> (Thumb, 710 bytes, Stack size 88 bytes, co_app_stm32.o(.text.canopen_app_resetCommunication))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = canopen_app_resetCommunication &rArr; CO_CANopenInit &rArr; CO_NMT_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInitPDO
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANopenInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_LSSinit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetNormalMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = main &rArr; canopen_app_process &rArr; canopen_app_init &rArr; canopen_app_resetCommunication &rArr; CO_CANopenInit &rArr; CO_NMT_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_app_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[135]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[136]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[137]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
</UL>

<P><STRONG><a name="[59]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[112]"></a>_DoInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, segger_rtt.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[115]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, segger_rtt.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[116]"></a>_WriteNoCheck</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, segger_rtt.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[117]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, segger_rtt.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[119]"></a>_StoreChar</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, segger_rtt_printf.o(.text._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[11a]"></a>_PrintInt</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, segger_rtt_printf.o(.text._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[11b]"></a>_PrintUnsigned</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, segger_rtt_printf.o(.text._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[b8]"></a>CO_NMT_getInternalState</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, canopen.o(.text.CO_NMT_getInternalState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_NMT_getInternalState
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_RPDO
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[ba]"></a>CO_LSSslave_getState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, canopen.o(.text.CO_LSSslave_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_LSSslave_getState
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[bb]"></a>CO_isError</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, canopen.o(.text.CO_isError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_isError
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[bc]"></a>CO_getErrorRegister</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, canopen.o(.text.CO_getErrorRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getErrorRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[e9]"></a>RCC_Delay</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[e3]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[e0]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e1]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f1xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[df]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[e5]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>

<P><STRONG><a name="[ea]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[f0]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f1]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f2]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[6b]"></a>prv_send_can_message</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, co_driver_stm32.o(.text.prv_send_can_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt_TX
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>

<P><STRONG><a name="[d6]"></a>prv_read_can_received_msg</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, co_driver_stm32.o(.text.prv_read_can_received_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prv_read_can_received_msg &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[7c]"></a>OD_getIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_emergency.o(.text.OD_getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[7d]"></a>OD_get_u32</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_emergency.o(.text.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[38]"></a>OD_read_1014_default</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, co_emergency.o(.text.OD_read_1014_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OD_read_1014_default &rArr; CO_setUint32
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(.text.CO_EM_init)
</UL>
<P><STRONG><a name="[7e]"></a>OD_extension_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_emergency.o(.text.OD_extension_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OD_extension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[3a]"></a>OD_read_1003</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, co_emergency.o(.text.OD_read_1003))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OD_read_1003 &rArr; CO_setUint8
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(.text.CO_EM_init)
</UL>
<P><STRONG><a name="[3b]"></a>OD_write_1003</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, co_emergency.o(.text.OD_write_1003))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OD_write_1003 &rArr; CO_getUint8
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(.text.CO_EM_init)
</UL>
<P><STRONG><a name="[103]"></a>CO_setUint32</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, co_emergency.o(.text.CO_setUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_setUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_1003
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_1014_default
</UL>

<P><STRONG><a name="[102]"></a>CO_setUint8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, co_emergency.o(.text.CO_setUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_setUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_1003
</UL>

<P><STRONG><a name="[107]"></a>CO_getUint8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_emergency.o(.text.CO_getUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1003
</UL>

<P><STRONG><a name="[82]"></a>OD_get_u32</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_hbconsumer.o(.text.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
</UL>

<P><STRONG><a name="[83]"></a>OD_getIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_hbconsumer.o(.text.OD_getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
</UL>

<P><STRONG><a name="[84]"></a>CO_HBconsumer_initEntry</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, co_hbconsumer.o(.text.CO_HBconsumer_initEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CO_HBconsumer_initEntry &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1016
</UL>

<P><STRONG><a name="[3d]"></a>OD_write_1016</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, co_hbconsumer.o(.text.OD_write_1016))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OD_write_1016 &rArr; CO_HBconsumer_initEntry &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_initEntry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_hbconsumer.o(.text.CO_HBconsumer_init)
</UL>
<P><STRONG><a name="[85]"></a>OD_extension_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_hbconsumer.o(.text.OD_extension_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OD_extension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
</UL>

<P><STRONG><a name="[3e]"></a>CO_HBcons_receive</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, co_hbconsumer.o(.text.CO_HBcons_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_HBcons_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_hbconsumer.o(.text.CO_HBconsumer_initEntry)
</UL>
<P><STRONG><a name="[109]"></a>CO_getUint32</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_hbconsumer.o(.text.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1016
</UL>

<P><STRONG><a name="[8b]"></a>OD_get_u16</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_nmt_heartbeat.o(.text.OD_get_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u16 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
</UL>

<P><STRONG><a name="[8c]"></a>OD_getIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_nmt_heartbeat.o(.text.OD_getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
</UL>

<P><STRONG><a name="[40]"></a>OD_write_1017</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, co_nmt_heartbeat.o(.text.OD_write_1017))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OD_write_1017 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint16
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_nmt_heartbeat.o(.text.CO_NMT_init)
</UL>
<P><STRONG><a name="[8d]"></a>OD_extension_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_nmt_heartbeat.o(.text.OD_extension_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OD_extension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
</UL>

<P><STRONG><a name="[41]"></a>CO_NMT_receive</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, co_nmt_heartbeat.o(.text.CO_NMT_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_NMT_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_nmt_heartbeat.o(.text.CO_NMT_init)
</UL>
<P><STRONG><a name="[10a]"></a>CO_getUint16</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_nmt_heartbeat.o(.text.CO_getUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint16
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1017
</UL>

<P><STRONG><a name="[8f]"></a>CO_isError</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, co_nmt_heartbeat.o(.text.CO_isError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_isError
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
</UL>

<P><STRONG><a name="[90]"></a>CO_getErrorRegister</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, co_nmt_heartbeat.o(.text.CO_getErrorRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getErrorRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
</UL>

<P><STRONG><a name="[4e]"></a>OD_readDisabled</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, co_odinterface.o(.text.OD_readDisabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OD_readDisabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_odinterface.o(.text.OD_getSub)
</UL>
<P><STRONG><a name="[4f]"></a>OD_writeDisabled</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, co_odinterface.o(.text.OD_writeDisabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OD_writeDisabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_odinterface.o(.text.OD_getSub)
</UL>
<P><STRONG><a name="[91]"></a>PDO_initMapping</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, co_pdo.o(.text.PDO_initMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PDO_initMapping &rArr; OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u8
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getIndex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>

<P><STRONG><a name="[92]"></a>OD_get_u32</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_pdo.o(.text.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
</UL>

<P><STRONG><a name="[93]"></a>OD_getIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_pdo.o(.text.OD_getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
</UL>

<P><STRONG><a name="[42]"></a>CO_PDO_receive</STRONG> (Thumb, 240 bytes, Stack size 28 bytes, co_pdo.o(.text.CO_PDO_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CO_PDO_receive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_pdo.o(.text.CO_RPDO_init)
<LI> co_pdo.o(.text.OD_write_14xx)
</UL>
<P><STRONG><a name="[94]"></a>OD_get_u8</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_pdo.o(.text.OD_get_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
</UL>

<P><STRONG><a name="[95]"></a>OD_get_u16</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_pdo.o(.text.OD_get_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u16 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>

<P><STRONG><a name="[43]"></a>OD_read_PDO_commParam</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, co_pdo.o(.text.OD_read_PDO_commParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OD_read_PDO_commParam &rArr; OD_readOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_readOriginal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_pdo.o(.text.CO_TPDO_init)
<LI> co_pdo.o(.text.CO_RPDO_init)
</UL>
<P><STRONG><a name="[44]"></a>OD_write_14xx</STRONG> (Thumb, 672 bytes, Stack size 80 bytes, co_pdo.o(.text.OD_write_14xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OD_write_14xx &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint16
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(.text.CO_RPDO_init)
</UL>
<P><STRONG><a name="[45]"></a>OD_write_PDO_mapping</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, co_pdo.o(.text.OD_write_PDO_mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OD_write_PDO_mapping &rArr; PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOconfigMap
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_pdo.o(.text.CO_TPDO_init)
<LI> co_pdo.o(.text.CO_RPDO_init)
</UL>
<P><STRONG><a name="[96]"></a>OD_extension_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_pdo.o(.text.OD_extension_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OD_extension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
</UL>

<P><STRONG><a name="[110]"></a>PDOconfigMap</STRONG> (Thumb, 430 bytes, Stack size 80 bytes, co_pdo.o(.text.PDOconfigMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PDOconfigMap &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_find
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_initMapping
</UL>

<P><STRONG><a name="[104]"></a>CO_getUint32</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_pdo.o(.text.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_PDO_commParam
</UL>

<P><STRONG><a name="[105]"></a>CO_setUint32</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, co_pdo.o(.text.CO_setUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_setUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_read_PDO_commParam
</UL>

<P><STRONG><a name="[10e]"></a>CO_getUint8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_pdo.o(.text.CO_getUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_PDO_mapping
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
</UL>

<P><STRONG><a name="[10f]"></a>CO_getUint16</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_pdo.o(.text.CO_getUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint16
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_18xx
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_14xx
</UL>

<P><STRONG><a name="[4d]"></a>OD_write_18xx</STRONG> (Thumb, 734 bytes, Stack size 88 bytes, co_pdo.o(.text.OD_write_18xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OD_write_18xx &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint16
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(.text.CO_TPDO_init)
</UL>
<P><STRONG><a name="[b3]"></a>CO_TPDOsend</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, co_pdo.o(.text.CO_TPDOsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CO_TPDOsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_process
</UL>

<P><STRONG><a name="[50]"></a>OD_read_dummy</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, co_pdo.o(.text.OD_read_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OD_read_dummy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(.text.PDOconfigMap)
</UL>
<P><STRONG><a name="[51]"></a>OD_write_dummy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_pdo.o(.text.OD_write_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OD_write_dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(.text.PDOconfigMap)
</UL>
<P><STRONG><a name="[99]"></a>OD_getIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_sdoserver.o(.text.OD_getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
</UL>

<P><STRONG><a name="[9a]"></a>OD_set_u32</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, co_sdoserver.o(.text.OD_set_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_set_u32 &rArr; OD_set_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
</UL>

<P><STRONG><a name="[9b]"></a>OD_get_u8</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_sdoserver.o(.text.OD_get_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
</UL>

<P><STRONG><a name="[9c]"></a>OD_get_u32</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_sdoserver.o(.text.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
</UL>

<P><STRONG><a name="[46]"></a>OD_write_1201_additional</STRONG> (Thumb, 670 bytes, Stack size 72 bytes, co_sdoserver.o(.text.OD_write_1201_additional))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OD_write_1201_additional &rArr; CO_SDOserver_init_canRxTx &rArr; CO_CANtxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init_canRxTx
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sdoserver.o(.text.CO_SDOserver_init)
</UL>
<P><STRONG><a name="[9d]"></a>OD_extension_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_sdoserver.o(.text.OD_extension_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OD_extension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
</UL>

<P><STRONG><a name="[9e]"></a>CO_SDOserver_init_canRxTx</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, co_sdoserver.o(.text.CO_SDOserver_init_canRxTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CO_SDOserver_init_canRxTx &rArr; CO_CANtxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
</UL>

<P><STRONG><a name="[10c]"></a>CO_getUint32</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_sdoserver.o(.text.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
</UL>

<P><STRONG><a name="[10d]"></a>CO_getUint8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_sdoserver.o(.text.CO_getUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1201_additional
</UL>

<P><STRONG><a name="[47]"></a>CO_SDO_receive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, co_sdoserver.o(.text.CO_SDO_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CO_SDO_receive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sdoserver.o(.text.CO_SDOserver_init_canRxTx)
</UL>
<P><STRONG><a name="[a3]"></a>readFromOd</STRONG> (Thumb, 414 bytes, Stack size 72 bytes, co_sdoserver.o(.text.readFromOd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = readFromOd &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_mappable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSDOabCode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>

<P><STRONG><a name="[a4]"></a>OD_mappable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, co_sdoserver.o(.text.OD_mappable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_mappable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateAndWriteToOD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromOd
</UL>

<P><STRONG><a name="[a5]"></a>validateAndWriteToOD</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, co_sdoserver.o(.text.validateAndWriteToOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = validateAndWriteToOD &rArr; OD_mappable
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_mappable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_getSDOabCode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDOserver_process
</UL>

<P><STRONG><a name="[a6]"></a>OD_get_u32</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_sync.o(.text.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[a7]"></a>OD_getIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_sync.o(.text.OD_getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[48]"></a>OD_write_1005</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, co_sync.o(.text.OD_write_1005))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OD_write_1005 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(.text.CO_SYNC_init)
</UL>
<P><STRONG><a name="[a8]"></a>OD_extension_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_sync.o(.text.OD_extension_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OD_extension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[a9]"></a>OD_get_u8</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_sync.o(.text.OD_get_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u8 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
</UL>

<P><STRONG><a name="[49]"></a>OD_write_1019</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, co_sync.o(.text.OD_write_1019))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OD_write_1019 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint8
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(.text.CO_SYNC_init)
</UL>
<P><STRONG><a name="[4a]"></a>CO_SYNC_receive</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, co_sync.o(.text.CO_SYNC_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_SYNC_receive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_sync.o(.text.CO_SYNC_init)
<LI> co_sync.o(.text.OD_write_1005)
</UL>
<P><STRONG><a name="[108]"></a>CO_getUint32</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_sync.o(.text.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1005
</UL>

<P><STRONG><a name="[10b]"></a>CO_getUint8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_sync.o(.text.CO_getUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1019
</UL>

<P><STRONG><a name="[ab]"></a>CO_SYNCsend</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, co_sync.o(.text.CO_SYNCsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CO_SYNCsend &rArr; CO_CANsend &rArr; prv_send_can_message &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
</UL>

<P><STRONG><a name="[ac]"></a>OD_get_u32</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, co_time.o(.text.OD_get_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OD_get_u32 &rArr; OD_get_value &rArr; OD_getSub
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
</UL>

<P><STRONG><a name="[ad]"></a>OD_getIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_time.o(.text.OD_getIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_getIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
</UL>

<P><STRONG><a name="[4b]"></a>OD_write_1012</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, co_time.o(.text.OD_write_1012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OD_write_1012 &rArr; OD_writeOriginal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_writeOriginal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_time.o(.text.CO_TIME_init)
</UL>
<P><STRONG><a name="[ae]"></a>OD_extension_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_time.o(.text.OD_extension_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OD_extension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_init
</UL>

<P><STRONG><a name="[4c]"></a>CO_TIME_receive</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, co_time.o(.text.CO_TIME_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_TIME_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_time.o(.text.CO_TIME_init)
</UL>
<P><STRONG><a name="[b0]"></a>CO_getUint32</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_time.o(.text.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_process
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_write_1012
</UL>

<P><STRONG><a name="[b1]"></a>CO_getUint16</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, co_time.o(.text.CO_getUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_getUint16
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TIME_process
</UL>

<P><STRONG><a name="[3f]"></a>CO_LSSslave_receive</STRONG> (Thumb, 694 bytes, Stack size 72 bytes, co_lssslave.o(.text.CO_LSSslave_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CO_LSSslave_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_lssslave.o(.text.CO_LSSslave_init)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
